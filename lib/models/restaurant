// Enhanced restaurant.dart model
class Restaurant {
  final String id;
  final String name;
  final String address;
  final double latitude;
  final double longitude;
  final String? cuisine;
  final String? priceRange;
  final double? rating;
  final List<String>? images;
  final String? phone;
  final String? email;
  final Map<String, String>? openingHours;
  final List<String>? features; // e.g., ['WiFi', 'Parking', 'Delivery']
  final String? description;
  final bool isOpen;
  final String? city;
  final String? district;

  Restaurant({
    required this.id,
    required this.name,
    required this.address,
    required this.latitude,
    required this.longitude,
    this.cuisine,
    this.priceRange,
    this.rating,
    this.images,
    this.phone,
    this.email,
    this.openingHours,
    this.features,
    this.description,
    this.isOpen = true,
    this.city,
    this.district,
  });

  // Factory for JSON deserialization
  factory Restaurant.fromJson(Map<String, dynamic> json) {
    return Restaurant(
      id: json['id']?.toString() ?? '',
      name: json['name']?.toString() ?? '',
      address: json['address']?.toString() ?? '',
      latitude: _parseDouble(json['location']?['lat'] ?? json['latitude']),
      longitude: _parseDouble(json['location']?['lng'] ?? json['longitude']),
      cuisine: json['cuisine']?.toString(),
      priceRange: json['priceRange']?.toString(),
      rating: _parseDouble(json['rating']),
      images: json['images'] != null ? List<String>.from(json['images']) : null,
      phone: json['phone']?.toString(),
      email: json['email']?.toString(),
      openingHours: json['openingHours'] != null
          ? Map<String, String>.from(json['openingHours'])
          : null,
      features: json['features'] != null ? List<String>.from(json['features']) : null,
      description: json['description']?.toString(),
      isOpen: json['isOpen'] ?? true,
      city: json['city']?.toString(),
      district: json['district']?.toString(),
    );
  }

  // Helper method to safely parse double values
  static double _parseDouble(dynamic value) {
    if (value == null) return 0.0;
    if (value is double) return value;
    if (value is int) return value.toDouble();
    if (value is String) return double.tryParse(value) ?? 0.0;
    return 0.0;
  }

  // Convert to JSON for serialization
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'address': address,
      'location': {
        'lat': latitude,
        'lng': longitude,
      },
      'cuisine': cuisine,
      'priceRange': priceRange,
      'rating': rating,
      'images': images,
      'phone': phone,
      'email': email,
      'openingHours': openingHours,
      'features': features,
      'description': description,
      'isOpen': isOpen,
      'city': city,
      'district': district,
    };
  }

  // Get price range display text
  String get priceRangeDisplay {
    switch (priceRange) {
      case 'budget':
        return 'Budget (Rs. 0-500)';
      case 'mid-range':
        return 'Mid-range (Rs. 500-1500)';
      case 'fine-dining':
        return 'Fine Dining (Rs. 1500+)';
      default:
        return 'Price not specified';
    }
  }

  // Get cuisine display text
  String get cuisineDisplay {
    return cuisine ?? 'Cuisine not specified';
  }

  // Get rating display
  String get ratingDisplay {
    if (rating == null) return 'No rating';
    return '${rating!.toStringAsFixed(1)} ‚≠ê';
  }

  // Check if restaurant is currently open (basic implementation)
  bool get isCurrentlyOpen {
    if (openingHours == null) return isOpen;

    final now = DateTime.now();
    final dayOfWeek = _getDayOfWeek(now.weekday);
    final currentTime = '${now.hour.toString().padLeft(2, '0')}:${now.minute.toString().padLeft(2, '0')}';

    final todayHours = openingHours![dayOfWeek];
    if (todayHours == null || todayHours.toLowerCase() == 'closed') {
      return false;
    }

    // Simple time comparison (you might want to make this more sophisticated)
    return isOpen;
  }

  String _getDayOfWeek(int weekday) {
    const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
    return days[weekday - 1];
  }

  // Get opening hours for today
  String get todaysHours {
    if (openingHours == null) return 'Hours not specified';

    final now = DateTime.now();
    final dayOfWeek = _getDayOfWeek(now.weekday);
    return openingHours![dayOfWeek] ?? 'Hours not specified';
  }
}

// Sample data for testing (Nepal restaurants)
class SampleNepalRestaurants {
  static List<Restaurant> getSampleData() {
    return [
      Restaurant(
        id: '1',
        name: 'Bhojan Griha',
        address: 'Dillibazar, Kathmandu',
        latitude: 27.7094,
        longitude: 85.3206,
        cuisine: 'Nepali',
        priceRange: 'mid-range',
        rating: 4.2,
        phone: '+977-1-4411603',
        city: 'Kathmandu',
        district: 'Kathmandu',
        features: ['Traditional Music', 'Cultural Show', 'Parking'],
        description: 'Authentic Nepali cuisine in a traditional setting with cultural performances.',
        openingHours: {
          'monday': '11:00 - 22:00',
          'tuesday': '11:00 - 22:00',
          'wednesday': '11:00 - 22:00',
          'thursday': '11:00 - 22:00',
          'friday': '11:00 - 22:00',
          'saturday': '11:00 - 22:00',
          'sunday': '11:00 - 22:00',
        },
      ),
      Restaurant(
        id: '2',
        name: 'Fire and Ice Pizzeria',
        address: 'Tridevi Marg, Thamel, Kathmandu',
        latitude: 27.7151,
        longitude: 85.3075,
        cuisine: 'Italian',
        priceRange: 'mid-range',
        rating: 4.5,
        phone: '+977-1-4250210',
        city: 'Kathmandu',
        district: 'Kathmandu',
        features: ['WiFi', 'Credit Cards', 'Delivery'],
        description: 'Authentic wood-fired pizzas in the heart of Thamel.',
      ),
      Restaurant(
        id: '3',
        name: 'Krishnarpan',
        address: 'Dwarika\'s Hotel, Battisputali, Kathmandu',
        latitude: 27.6915,
        longitude: 85.3447,
        cuisine: 'Nepali',
        priceRange: 'fine-dining',
        rating: 4.8,
        phone: '+977-1-4479488',
        city: 'Kathmandu',
        district: 'Kathmandu',
        features: ['Fine Dining', 'Traditional Decor', 'Valet Parking'],
        description: 'Nepal\'s most acclaimed fine dining restaurant featuring traditional Nepali cuisine.',
      ),
      Restaurant(
        id: '4',
        name: 'Thamel House Restaurant',
        address: 'Thamel, Kathmandu',
        latitude: 27.7144,
        longitude: 85.3082,
        cuisine: 'Nepali',
        priceRange: 'budget',
        rating: 4.1,
        phone: '+977-1-4410388',
        city: 'Kathmandu',
        district: 'Kathmandu',
        features: ['Traditional Architecture', 'Cultural Show', 'WiFi'],
        description: 'Traditional Nepali restaurant in a beautifully restored Newari house.',
      ),
      Restaurant(
        id: '5',
        name: 'Momos & More',
        address: 'New Road, Kathmandu',
        latitude: 27.7040,
        longitude: 85.3077,
        cuisine: 'Fast Food',
        priceRange: 'budget',
        rating: 3.9,
        phone: '+977-1-4221845',
        city: 'Kathmandu',
        district: 'Kathmandu',
        features: ['Quick Service', 'Takeaway', 'Affordable'],
        description: 'Best momos in town with various fillings and styles.',
      ),
    ];
  }
}